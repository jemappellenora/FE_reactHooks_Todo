{"version":3,"sources":["Form.jsx","App.js","index.js"],"names":["Form","onSubmit","initialValue","useState","value","setValue","onChange","e","target","resetValue","useInputValue","text","preventDefault","className","placeHolder","App","todos","setTodos","complete","map","i","onClick","todo","k","toggleComplete","style","textDecoration","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iPA8BeA,EApBF,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SAAe,EATT,SAACC,GAAkB,IAAD,EACZC,mBAAS,IADG,mBAC/BC,EAD+B,KACxBC,EADwB,KAEtC,MAAO,CACLD,QACAE,SAAU,SAACC,GAAD,OAAOF,EAASE,EAAEC,OAAOJ,QACnCK,WAAY,kBAAMJ,EAAS,MAOCK,GAAxBD,EAHuB,EAGvBA,WAAeE,EAHQ,8BAM7B,OACE,sBACEV,SAAU,SAACM,GACTA,EAAEK,iBACFX,EAASU,EAAKP,OACdK,KAJJ,SAOE,mCAAOI,UAAU,QAAQC,YAAY,YAAeH,OCoB3CI,G,MAxCH,WAAO,IAAD,EACUZ,mBAAS,IADnB,mBACTa,EADS,KACFC,EADE,KAehB,OACE,sBAAKJ,UAAU,MAAf,UACE,kDACA,cAAC,EAAD,CACEZ,SAAU,SAACU,GAAD,OAAUM,EAAS,CAAC,CAAEN,OAAMO,UAAU,IAApB,mBAAgCF,QAE9D,8BACGA,EAAMG,KAAI,WAAqBC,GAArB,IAAGT,EAAH,EAAGA,KAAMO,EAAT,EAASA,SAAT,OACT,qBAEEL,UAAU,kBACVQ,QAAS,kBAvBI,SAACD,GAAD,OACrBH,EACED,EAAMG,KAAI,SAACG,EAAMC,GAAP,OACRA,IAAMH,EAAN,2BAESE,GAFT,IAGMJ,UAAWI,EAAKJ,WAElBI,MAeeE,CAAeJ,IAC9BK,MAAO,CAAEC,eAAgBR,EAAW,eAAiB,IAJvD,SAMGP,GALIA,QASX,wBAAQE,UAAU,SAASQ,QAAS,kBAAMJ,EAAS,KAAnD,wBChCNU,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.f17929ea.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nconst useInputValue = (initialValue) => {\r\n  const [value, setValue] = useState(\"\");\r\n  return {\r\n    value,\r\n    onChange: (e) => setValue(e.target.value),\r\n    resetValue: () => setValue(\"\"),\r\n  };\r\n};\r\n\r\nconst Form = ({ onSubmit }) => {\r\n  //   const [value, setValue] = useState(\"\");\r\n  //   return <input value={value} onChange={(e) => setValue(e.target.value)} />;\r\n  let { resetValue, ...text } = useInputValue(\"\");\r\n  // let email = useInputValue(\"\")\r\n\r\n  return (\r\n    <form\r\n      onSubmit={(e) => {\r\n        e.preventDefault();\r\n        onSubmit(text.value);\r\n        resetValue();\r\n      }}\r\n    >\r\n      <input className=\"input\" placeHolder=\"tasks...\" {...text} />\r\n      {/* <input {...email} /> */}\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default Form;\r\n","import React, { useState } from \"react\";\r\nimport Form from \"./Form\";\r\nimport \"./App.css\";\r\n\r\nconst App = () => {\r\n  const [todos, setTodos] = useState([]);\r\n\r\n  const toggleComplete = (i) =>\r\n    setTodos(\r\n      todos.map((todo, k) =>\r\n        k === i\r\n          ? {\r\n              ...todo,\r\n              complete: !todo.complete,\r\n            }\r\n          : todo\r\n      )\r\n    );\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <h1>Nora's Todo List</h1>\r\n      <Form\r\n        onSubmit={(text) => setTodos([{ text, complete: false }, ...todos])}\r\n      />\r\n      <div>\r\n        {todos.map(({ text, complete }, i) => (\r\n          <div\r\n            key={text}\r\n            className=\"displayTextFont\"\r\n            onClick={() => toggleComplete(i)}\r\n            style={{ textDecoration: complete ? \"line-through\" : \"\" }}\r\n          >\r\n            {text}\r\n          </div>\r\n        ))}\r\n      </div>\r\n      <button className=\"button\" onClick={() => setTodos([])}>\r\n        Reset\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}